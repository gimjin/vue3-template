---
description: 
globs: *.ts,*.scss,*.vue
alwaysApply: false
---
# 项目指南

## 项目概述

基于Vue 3的前端模板项目，使用以下技术栈：

- **核心框架**：[Vue 3](mdc:https:/vuejs.org)、[TypeScript](mdc:https:/www.typescriptlang.org)
- **构建工具**：[Vite](mdc:https:/vitejs.dev)
- **状态管理**：[Pinia](mdc:https:/pinia.vuejs.org)
- **路由管理**：[Vue Router](mdc:https:/router.vuejs.org)
- **UI组件库**：[Element Plus](mdc:https:/element-plus.org)
- **CSS解决方案**：[UnoCSS](mdc:https:/unocss.dev)、[SASS](mdc:https:/sass-lang.com)

### 目录结构

```
src/
├── assets/       # 静态资源
├── components/   # 可复用组件
├── stores/       # Pinia状态存储
├── views/        # 页面组件
├── App.vue       # 根组件
├── main.ts       # 应用入口
├── router.ts     # 路由配置
└── style.scss    # 全局样式
```

## 开发规范

### TypeScript规范

- 使用TypeScript类型定义，避免`any`类型
- 遵循[Vue 3 + TypeScript](mdc:https:/vuejs.org/guide/typescript/overview.html)官方实践

### Vue组件规范

- 使用组合式API（Composition API）和`<script setup>`语法
- 组件命名使用PascalCase（如`UserProfile.vue`）
- 单文件组件结构：`<script setup>`, `<template>`, `<style>`
- 组件示例：

```vue
<script setup lang="ts">
// 导入
import { ref, computed } from 'vue'

// 类型定义
interface Props {
  title: string
}

// Props和Emits
const props = defineProps<Props>()
const emit = defineEmits<{
  (e: 'update', value: string): void
}>()

// 状态和方法
const count = ref(0)
const doubleCount = computed(() => count.value * 2)
const increment = () => count.value++
</script>

<template>
  <div><!-- 组件内容 --></div>
</template>

<style scoped lang="scss">
/* 组件样式 */
</style>
```

### 组件最佳实践

- **组件分类**：
  - 页面组件：`src/views/`
  - 通用组件：`src/components/`

- **组件通信**：
  - Props/Emits：父子组件通信
  - Provide/Inject：跨层级传递数据
  - Pinia Store：全局状态管理

- **性能优化**：
  - 使用`v-memo`缓存列表渲染
  - 使用`defineAsyncComponent`懒加载组件
  - 大型列表使用虚拟滚动

### 样式规范

- 组件样式使用`scoped`属性避免污染
- 优先使用UnoCSS原子类
- 全局样式定义在`src/style.scss`中

## 工作流程

### 开发流程

1. 安装依赖：`pnpm install`
2. 启动开发服务器：`pnpm dev`
3. 构建生产版本：`pnpm build`
4. 预览构建结果：`pnpm preview`

### 代码质量控制

- **代码检查**：
  - ESLint：[eslint.config.mjs](mdc:eslint.config.mjs)
  - Stylelint：[.stylelintrc.json](mdc:.stylelintrc.json)
  - Prettier：[.prettierrc.json](mdc:.prettierrc.json)

- **提交规范**：
  - 使用Husky和lint-staged在提交前检查代码
  - 提交信息遵循[Conventional Commits](mdc:https:/www.conventionalcommits.org)规范

## 项目配置

### 关键配置文件

- [vite.config.ts](mdc:vite.config.ts)：Vite配置，包含插件、别名和代理
- [tsconfig.json](mdc:tsconfig.json)：TypeScript配置
- [package.json](mdc:package.json)：依赖和脚本定义
- [uno.config.ts](mdc:uno.config.ts)：UnoCSS配置

### 环境要求

- Node.js: ^22.0.0
- pnpm: ^10.0.0
